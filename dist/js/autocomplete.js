"use strict";var _createClass=function(){function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}}(),_get=function e(t,n,o){null===t&&(t=Function.prototype);var i=Object.getOwnPropertyDescriptor(t,n);if(void 0===i){var s=Object.getPrototypeOf(t);return null===s?void 0:e(s,n,o)}if("value"in i)return i.value;var r=i.get;return void 0!==r?r.call(o):void 0};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}!function(l){var t={data:{},limit:1/0,onAutocomplete:null,minLength:1,sortFunction:function(e,t,n){return e.indexOf(n)-t.indexOf(n)}},e=function(e){function i(e,t){_classCallCheck(this,i);var n=_possibleConstructorReturn(this,(i.__proto__||Object.getPrototypeOf(i)).call(this,i,e,t));return(n.el.M_Autocomplete=n).options=l.extend({},i.defaults,t),n.isOpen=!1,n.count=0,n.activeIndex=-1,n.oldVal,n.$inputField=n.$el.closest(".input-field"),n.$active=l(),n._setupDropdown(),n._setupEventHandlers(),n}return _inherits(i,Component),_createClass(i,[{key:"destroy",value:function(){this._removeEventHandlers(),this._removeDropdown(),this.el.M_Autocomplete=void 0}},{key:"_setupEventHandlers",value:function(){this._handleInputBlurBound=this._handleInputBlur.bind(this),this._handleInputKeyupAndFocusBound=this._handleInputKeyupAndFocus.bind(this),this._handleInputKeydownBound=this._handleInputKeydown.bind(this),this._handleContainerMousedownAndTouchstartBound=this._handleContainerMousedownAndTouchstart.bind(this),this.el.addEventListener("blur",this._handleInputBlurBound),this.el.addEventListener("keyup",this._handleInputKeyupAndFocusBound),this.el.addEventListener("focus",this._handleInputKeyupAndFocusBound),this.el.addEventListener("keydown",this._handleInputKeydownBound),this.container.addEventListener("mousedown",this._handleContainerMousedownAndTouchstartBound),void 0!==window.ontouchstart&&this.container.addEventListener("touchstart",this._handleContainerMousedownAndTouchstartBound)}},{key:"_removeEventHandlers",value:function(){this.el.removeEventListener("blur",this._handleInputBlurBound),this.el.removeEventListener("keyup",this._handleInputKeyupAndFocusBound),this.el.removeEventListener("focus",this._handleInputKeyupAndFocusBound),this.el.removeEventListener("keydown",this._handleInputKeydownBound),this.container.removeEventListener("mousedown",this._handleContainerMousedownAndTouchstartBound),void 0!==window.ontouchstart&&this.container.removeEventListener("touchstart",this._handleContainerMousedownAndTouchstartBound)}},{key:"_setupDropdown",value:function(){this.container=document.createElement("ul"),this.container.id="autocomplete-options-"+M.guid(),l(this.container).addClass("autocomplete-content dropdown-content"),this.$inputField.append(this.container),this.el.setAttribute("data-target",this.container.id),this.dropdown=M.Dropdown.init(this.el,{autoFocus:!1,closeOnClick:!1,coverTrigger:!1}),this.el.removeEventListener("click",this.dropdown._handleClickBound)}},{key:"_removeDropdown",value:function(){this.container.parentNode.removeChild(this.container)}},{key:"_handleInputBlur",value:function(){this.dropdown.close(),this._resetAutocomplete()}},{key:"_handleInputKeyupAndFocus",value:function(e){var t=this;"keyup"===e.type&&(i._keydown=!1),this.count=0;var n=this.el.value.toLowerCase();13!==e.keyCode&&38!==e.keyCode&&40!==e.keyCode&&(this.oldVal!==n&&(this._resetAutocomplete(),n.length>=this.options.minLength&&(this.isOpen=!0,this._renderDropdown(this.options.data,n)),this.dropdown.isOpen?this.dropdown.recalculateDimensions():setTimeout(function(){t.dropdown.open()},100)),this.oldVal=n)}},{key:"_handleInputKeydown",value:function(e){i._keydown=!0;var t=e.keyCode,n=void 0,o=l(this.container).children("li").length;13===t&&0<=this.activeIndex?(n=l(this.container).children("li").eq(this.activeIndex)).length&&(this.selectOption(n),e.preventDefault()):38!==t&&40!==t||(e.preventDefault(),38===t&&0<this.activeIndex&&this.activeIndex--,40===t&&this.activeIndex<o-1&&this.activeIndex++,this.$active.removeClass("active"),0<=this.activeIndex&&(this.$active=l(this.container).children("li").eq(this.activeIndex),this.$active.addClass("active")))}},{key:"_handleContainerMousedownAndTouchstart",value:function(e){var t=l(e.target).closest("li");this.selectOption(t)}},{key:"_highlight",value:function(e,t){var n=t.find("img"),o=t.text().toLowerCase().indexOf(""+e.toLowerCase()),i=o+e.length-1,s=t.text().slice(0,o),r=t.text().slice(o,i+1),a=t.text().slice(i+1);t.html("<span>"+s+"<span class='highlight'>"+r+"</span>"+a+"</span>"),n.length&&t.prepend(n)}},{key:"_resetCurrentElement",value:function(){this.activeIndex=-1,this.$active.removeClass("active")}},{key:"_resetAutocomplete",value:function(){l(this.container).empty(),this._resetCurrentElement(),this.oldVal=null,this.isOpen=!1}},{key:"selectOption",value:function(e){var t=e.text().trim();this.el.value=t,this.$el.trigger("change"),this._resetAutocomplete(),this.dropdown.close(),"function"==typeof this.options.onAutocomplete&&this.options.onAutocomplete.call(this,t)}},{key:"_renderDropdown",value:function(e,n){var o=this;this._resetAutocomplete();var t=[];for(var i in e)if(e.hasOwnProperty(i)&&-1!==i.toLowerCase().indexOf(n)){if(this.count>=this.options.limit)break;var s={data:e[i],key:i};t.push(s),this.count++}t.sort(function(e,t){return o.options.sortFunction(e.key.toLowerCase(),t.key.toLowerCase(),n.toLowerCase())});for(var r=0;r<t.length;r++){var a=t[r],u=l("<li></li>");a.data?u.append('<img src="'+a.data+'" class="right circle"><span>'+a.key+"</span>"):u.append("<span>"+a.key+"</span>"),l(this.container).append(u),this._highlight(n,u)}}},{key:"updateData",value:function(e){var t=this.el.value.toLowerCase();this.options.data=e,this.isOpen&&this._renderDropdown(e,t)}}],[{key:"init",value:function(e,t){return _get(i.__proto__||Object.getPrototypeOf(i),"init",this).call(this,this,e,t)}},{key:"getInstance",value:function(e){return(e.jquery?e[0]:e).M_Autocomplete}},{key:"defaults",get:function(){return t}}]),i}();e._keydown=!1,M.Autocomplete=e,M.jQueryLoaded&&M.initializeJqueryWrapper(e,"autocomplete","M_Autocomplete")}(cash);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
