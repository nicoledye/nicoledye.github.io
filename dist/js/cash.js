"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};window.cash=function(){var n,o=document,u=window,t=Array.prototype,s=t.slice,r=t.filter,i=t.push,e=function(){},a=function(t){return(void 0===t?"undefined":_typeof(t))===(void 0===e?"undefined":_typeof(e))&&t.call},f=function(t){return(void 0===t?"undefined":_typeof(t))===_typeof("")},c=/^#[\w-]*$/,h=/^\.[\w-]*$/,l=/<.+>/,d=/^\w+$/;function p(t,e){e=e||o;var n=h.test(t)?e.getElementsByClassName(t.slice(1)):d.test(t)?e.getElementsByTagName(t):e.querySelectorAll(t);return n}function v(t){if(!n){var e=(n=o.implementation.createHTMLDocument(null)).createElement("base");e.href=o.location.href,n.head.appendChild(e)}return n.body.innerHTML=t,n.body.childNodes}function m(t){"loading"!==o.readyState?t():o.addEventListener("DOMContentLoaded",t)}function g(t,e){if(!t)return this;if(t.cash&&t!==u)return t;var n,r=t,i=0;if(f(t))r=c.test(t)?o.getElementById(t.slice(1)):l.test(t)?v(t):p(t,e);else if(a(t))return m(t),this;if(!r)return this;if(r.nodeType||r===u)this[0]=r,this.length=1;else for(n=this.length=r.length;i<n;i++)this[i]=r[i];return this}function y(t,e){return new g(t,e)}var b=y.fn=y.prototype=g.prototype={cash:!0,length:0,push:i,splice:t.splice,map:t.map,init:g};function x(t,e){for(var n=t.length,r=0;r<n&&!1!==e.call(t[r],t[r],r,t);r++);}function N(t,e){var n=t&&(t.matches||t.webkitMatchesSelector||t.mozMatchesSelector||t.msMatchesSelector||t.oMatchesSelector);return!!n&&n.call(t,e)}function L(e){return f(e)?N:e.cash?function(t){return e.is(t)}:function(t,e){return t===e}}function C(t){return y(s.call(t).filter(function(t,e,n){return n.indexOf(t)===e}))}Object.defineProperty(b,"constructor",{value:y}),y.parseHTML=v,y.noop=e,y.isFunction=a,y.isString=f,y.extend=b.extend=function(t){t=t||{};var e=s.call(arguments),n=e.length,r=1;for(1===e.length&&(t=this,r=0);r<n;r++)if(e[r])for(var i in e[r])e[r].hasOwnProperty(i)&&(t[i]=e[r][i]);return t},y.extend({merge:function(t,e){for(var n=+e.length,r=t.length,i=0;i<n;r++,i++)t[r]=e[i];return t.length=r,t},each:x,matches:N,unique:C,isArray:Array.isArray,isNumeric:function(t){return!isNaN(parseFloat(t))&&isFinite(t)}});var E=y.uid="_cash"+Date.now();function w(t){return t[E]=t[E]||{}}function S(t,e,n){return w(t)[e]=n}function A(t,e){var n=w(t);return void 0===n[e]&&(n[e]=t.dataset?t.dataset[e]:y(t).attr("data-"+e)),n[e]}b.extend({data:function(e,n){if(f(e))return void 0===n?A(this[0],e):this.each(function(t){return S(t,e,n)});for(var t in e)this.data(t,e[t]);return this},removeData:function(i){return this.each(function(t){return n=i,void((r=w(e=t))?delete r[n]:e.dataset?delete e.dataset[n]:y(e).removeAttr("data-"+name));var e,n,r})}});var T=/\S+/g;function M(t){return f(t)&&t.match(T)}function B(t,e){return t.classList?t.classList.contains(e):new RegExp("(^| )"+e+"( |$)","gi").test(t.className)}function _(t,e,n){t.classList?t.classList.add(e):n.indexOf(" "+e+" ")&&(t.className+=" "+e)}function H(t,e){t.classList?t.classList.remove(e):t.className=t.className.replace(e,"")}b.extend({addClass:function(t){var r=M(t);return r?this.each(function(e){var n=" "+e.className+" ";x(r,function(t){_(e,t,n)})}):this},attr:function(e,n){if(e){if(f(e))return void 0===n?this[0]?this[0].getAttribute?this[0].getAttribute(e):this[0][e]:void 0:this.each(function(t){t.setAttribute?t.setAttribute(e,n):t[e]=n});for(var t in e)this.attr(t,e[t]);return this}},hasClass:function(t){var e=!1,n=M(t);return n&&n.length&&this.each(function(t){return!(e=B(t,n[0]))}),e},prop:function(e,n){if(f(e))return void 0===n?this[0][e]:this.each(function(t){t[e]=n});for(var t in e)this.prop(t,e[t]);return this},removeAttr:function(e){return this.each(function(t){t.removeAttribute?t.removeAttribute(e):delete t[e]})},removeClass:function(t){if(!arguments.length)return this.attr("class","");var n=M(t);return n?this.each(function(e){x(n,function(t){H(e,t)})}):this},removeProp:function(e){return this.each(function(t){delete t[e]})},toggleClass:function(t,e){if(void 0!==e)return this[e?"addClass":"removeClass"](t);var r=M(t);return r?this.each(function(e){var n=" "+e.className+" ";x(r,function(t){B(e,t)?H(e,t):_(e,t,n)})}):this}}),b.extend({add:function(t,e){return C(y.merge(this,y(t,e)))},each:function(t){return x(this,t),this},eq:function(t){return y(this.get(t))},filter:function(e){if(!e)return this;var n=a(e)?e:L(e);return y(r.call(this,function(t){return n(t,e)}))},first:function(){return this.eq(0)},get:function(t){return void 0===t?s.call(this):t<0?this[t+this.length]:this[t]},index:function(t){var e=t?y(t)[0]:this[0],n=t?this:y(e).parent().children();return s.call(n).indexOf(e)},last:function(){return this.eq(-1)}});var O,k,I,P,R,q,D=(R=/(?:^\w|[A-Z]|\b\w)/g,q=/[\s-_]+/g,function(t){return t.replace(R,function(t,e){return t[0===e?"toLowerCase":"toUpperCase"]()}).replace(q,"")}),F=(O={},k=document,I=k.createElement("div"),P=I.style,function(e){if(e=D(e),O[e])return O[e];var t=e.charAt(0).toUpperCase()+e.slice(1),n=(e+" "+["webkit","moz","ms","o"].join(t+" ")+t).split(" ");return x(n,function(t){if(t in P)return O[t]=e=O[e]=t,!1}),O[e]});function U(t,e){return parseInt(u.getComputedStyle(t[0],null)[e],10)||0}function $(e,n,t){var r,i=A(e,"_cashEvents"),o=i&&i[n];o&&(t?(e.removeEventListener(n,t),0<=(r=o.indexOf(t))&&o.splice(r,1)):(x(o,function(t){e.removeEventListener(n,t)}),o=[]))}function j(t,e){return"&"+encodeURIComponent(t)+"="+encodeURIComponent(e).replace(/%20/g,"+")}function z(t){var e,n,r,i=t.type;if(!i)return null;switch(i.toLowerCase()){case"select-one":return 0<=(r=(n=t).selectedIndex)?n.options[r].value:null;case"select-multiple":return e=[],x(t.options,function(t){t.selected&&e.push(t.value)}),e.length?e:null;case"radio":case"checkbox":return t.checked?t.value:null;default:return t.value?t.value:null}}function W(e,n,r){var t=f(n);t||!n.length?x(e,t?function(t){return t.insertAdjacentHTML(r?"afterbegin":"beforeend",n)}:function(t,e){return function(t,e,n){if(n){var r=t.childNodes[0];t.insertBefore(e,r)}else t.appendChild(e)}(t,0===e?n:n.cloneNode(!0),r)}):x(n,function(t){return W(e,t,r)})}y.prefixedProp=F,y.camelCase=D,b.extend({css:function(e,n){if(f(e))return e=F(e),1<arguments.length?this.each(function(t){return t.style[e]=n}):u.getComputedStyle(this[0])[e];for(var t in e)this.css(t,e[t]);return this}}),x(["Width","Height"],function(e){var t=e.toLowerCase();b[t]=function(){return this[0].getBoundingClientRect()[t]},b["inner"+e]=function(){return this[0]["client"+e]},b["outer"+e]=function(t){return this[0]["offset"+e]+(t?U(this,"margin"+("Width"===e?"Left":"Top"))+U(this,"margin"+("Width"===e?"Right":"Bottom")):0)}}),b.extend({off:function(e,n){return this.each(function(t){return $(t,e,n)})},on:function(u,n,s,c){var r;if(!f(u)){for(var t in u)this.on(t,n,u[t]);return this}return a(n)&&(s=n,n=null),"ready"===u?(m(s),this):(n&&(r=s,s=function(t){for(var e=t.target;!N(e,n);){if(e===this||null===e)return e=!1;e=e.parentNode}e&&r.call(e,t)}),this.each(function(t){var e,n,r,i,o=s;c&&(o=function(){s.apply(this,arguments),$(t,u,o)}),n=u,r=o,(i=A(e=t,"_cashEvents")||S(e,"_cashEvents",{}))[n]=i[n]||[],i[n].push(r),e.addEventListener(n,r)}))},one:function(t,e,n){return this.on(t,e,n,!0)},ready:m,trigger:function(t,e){if(document.createEvent){var n=document.createEvent("HTMLEvents");return n.initEvent(t,!0,!1),n=this.extend(n,e),this.each(function(t){return t.dispatchEvent(n)})}}}),b.extend({serialize:function(){var i="";return x(this[0].elements||this,function(t){if(!t.disabled&&"FIELDSET"!==t.tagName){var e=t.name;switch(t.type.toLowerCase()){case"file":case"reset":case"submit":case"button":break;case"select-multiple":var n=z(t);null!==n&&x(n,function(t){i+=j(e,t)});break;default:var r=z(t);null!==r&&(i+=j(e,r))}}}),i.substr(1)},val:function(e){return void 0===e?z(this[0]):this.each(function(t){return t.value=e})}}),b.extend({after:function(t){return y(t).insertAfter(this),this},append:function(t){return W(this,t),this},appendTo:function(t){return W(y(t),this),this},before:function(t){return y(t).insertBefore(this),this},clone:function(){return y(this.map(function(t){return t.cloneNode(!0)}))},empty:function(){return this.html(""),this},html:function(t){if(void 0===t)return this[0].innerHTML;var e=t.nodeType?t[0].outerHTML:t;return this.each(function(t){return t.innerHTML=e})},insertAfter:function(t){var i=this;return y(t).each(function(t,e){var n=t.parentNode,r=t.nextSibling;i.each(function(t){n.insertBefore(0===e?t:t.cloneNode(!0),r)})}),this},insertBefore:function(t){var i=this;return y(t).each(function(e,n){var r=e.parentNode;i.each(function(t){r.insertBefore(0===n?t:t.cloneNode(!0),e)})}),this},prepend:function(t){return W(this,t,!0),this},prependTo:function(t){return W(y(t),this,!0),this},remove:function(){return this.each(function(t){if(t.parentNode)return t.parentNode.removeChild(t)})},text:function(e){return void 0===e?this[0].textContent:this.each(function(t){return t.textContent=e})}});var X=o.documentElement;return b.extend({position:function(){var t=this[0];return{left:t.offsetLeft,top:t.offsetTop}},offset:function(){var t=this[0].getBoundingClientRect();return{top:t.top+u.pageYOffset-X.clientTop,left:t.left+u.pageXOffset-X.clientLeft}},offsetParent:function(){return y(this[0].offsetParent)}}),b.extend({children:function(e){var n=[];return this.each(function(t){i.apply(n,t.children)}),n=C(n),e?n.filter(function(t){return N(t,e)}):n},closest:function(t){return!t||this.length<1?y():this.is(t)?this.filter(t):this.parent().closest(t)},is:function(e){if(!e)return!1;var n=!1,r=L(e);return this.each(function(t){return!(n=r(t,e))}),n},find:function(e){if(!e||e.nodeType)return y(e&&this.has(e).length?e:null);var n=[];return this.each(function(t){i.apply(n,p(e,t))}),C(n)},has:function(e){var t=f(e)?function(t){return 0!==p(e,t).length}:function(t){return t.contains(e)};return this.filter(t)},next:function(){return y(this[0].nextElementSibling)},not:function(e){if(!e)return this;var n=L(e);return this.filter(function(t){return!n(t,e)})},parent:function(){var e=[];return this.each(function(t){t&&t.parentNode&&e.push(t.parentNode)}),C(e)},parents:function(e){var n,r=[];return this.each(function(t){for(n=t;n&&n.parentNode&&n!==o.body.parentNode;)n=n.parentNode,(!e||e&&N(n,e))&&r.push(n)}),C(r)},prev:function(){return y(this[0].previousElementSibling)},siblings:function(t){var e=this.parent().children(t),n=this[0];return e.filter(function(t){return t!==n})}}),y}();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
