"use strict";var _createClass=function(){function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}(),_get=function e(t,i,n){null===t&&(t=Function.prototype);var s=Object.getOwnPropertyDescriptor(t,i);if(void 0===s){var o=Object.getPrototypeOf(t);return null===o?void 0:e(o,i,n)}if("value"in s)return s.value;var h=s.get;return void 0!==h?h.call(n):void 0};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}!function(u){var t={data:[],placeholder:"",secondaryPlaceholder:"",autocompleteOptions:{},limit:1/0,onChipAdd:null,onChipSelect:null,onChipDelete:null},e=function(e){function a(e,t){_classCallCheck(this,a);var i=_possibleConstructorReturn(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,a,e,t));return(i.el.M_Chips=i).options=u.extend({},a.defaults,t),i.$el.addClass("chips input-field"),i.chipsData=[],i.$chips=u(),i._setupInput(),i.hasAutocomplete=0<Object.keys(i.options.autocompleteOptions).length,i.$input.attr("id")||i.$input.attr("id",M.guid()),i.options.data.length&&(i.chipsData=i.options.data,i._renderChips(i.chipsData)),i.hasAutocomplete&&i._setupAutocomplete(),i._setPlaceholder(),i._setupLabel(),i._setupEventHandlers(),i}return _inherits(a,Component),_createClass(a,[{key:"getData",value:function(){return this.chipsData}},{key:"destroy",value:function(){this._removeEventHandlers(),this.$chips.remove(),this.el.M_Chips=void 0}},{key:"_setupEventHandlers",value:function(){this._handleChipClickBound=this._handleChipClick.bind(this),this._handleInputKeydownBound=this._handleInputKeydown.bind(this),this._handleInputFocusBound=this._handleInputFocus.bind(this),this._handleInputBlurBound=this._handleInputBlur.bind(this),this.el.addEventListener("click",this._handleChipClickBound),document.addEventListener("keydown",a._handleChipsKeydown),document.addEventListener("keyup",a._handleChipsKeyup),this.el.addEventListener("blur",a._handleChipsBlur,!0),this.$input[0].addEventListener("focus",this._handleInputFocusBound),this.$input[0].addEventListener("blur",this._handleInputBlurBound),this.$input[0].addEventListener("keydown",this._handleInputKeydownBound)}},{key:"_removeEventHandlers",value:function(){this.el.removeEventListener("click",this._handleChipClickBound),document.removeEventListener("keydown",a._handleChipsKeydown),document.removeEventListener("keyup",a._handleChipsKeyup),this.el.removeEventListener("blur",a._handleChipsBlur,!0),this.$input[0].removeEventListener("focus",this._handleInputFocusBound),this.$input[0].removeEventListener("blur",this._handleInputBlurBound),this.$input[0].removeEventListener("keydown",this._handleInputKeydownBound)}},{key:"_handleChipClick",value:function(e){var t=u(e.target).closest(".chip"),i=u(e.target).is(".close");if(t.length){var n=t.index();i?(this.deleteChip(n),this.$input[0].focus()):this.selectChip(n)}else this.$input[0].focus()}},{key:"_handleInputFocus",value:function(){this.$el.addClass("focus")}},{key:"_handleInputBlur",value:function(){this.$el.removeClass("focus")}},{key:"_handleInputKeydown",value:function(e){if(a._keydown=!0,13===e.keyCode){if(this.hasAutocomplete&&this.autocomplete&&this.autocomplete.isOpen)return;e.preventDefault(),this.addChip({tag:this.$input[0].value}),this.$input[0].value=""}else 8!==e.keyCode&&37!==e.keyCode||""!==this.$input[0].value||!this.chipsData.length||(e.preventDefault(),this.selectChip(this.chipsData.length-1))}},{key:"_renderChip",value:function(e){if(e.tag){var t=document.createElement("div"),i=document.createElement("i");if(t.classList.add("chip"),t.textContent=e.tag,t.setAttribute("tabindex",0),u(i).addClass("material-icons close"),i.textContent="close",e.image){var n=document.createElement("img");n.setAttribute("src",e.image),t.insertBefore(n,t.firstChild)}return t.appendChild(i),t}}},{key:"_renderChips",value:function(){this.$chips.remove();for(var e=0;e<this.chipsData.length;e++){var t=this._renderChip(this.chipsData[e]);this.$el.append(t),this.$chips.add(t)}this.$el.append(this.$input[0])}},{key:"_setupAutocomplete",value:function(){var t=this;this.options.autocompleteOptions.onAutocomplete=function(e){t.addChip({tag:e}),t.$input[0].value="",t.$input[0].focus()},this.autocomplete=M.Autocomplete.init(this.$input[0],this.options.autocompleteOptions)}},{key:"_setupInput",value:function(){this.$input=this.$el.find("input"),this.$input.length||(this.$input=u("<input></input>"),this.$el.append(this.$input)),this.$input.addClass("input")}},{key:"_setupLabel",value:function(){this.$label=this.$el.find("label"),this.$label.length&&this.$label.setAttribute("for",this.$input.attr("id"))}},{key:"_setPlaceholder",value:function(){void 0!==this.chipsData&&!this.chipsData.length&&this.options.placeholder?u(this.$input).prop("placeholder",this.options.placeholder):(void 0===this.chipsData||this.chipsData.length)&&this.options.secondaryPlaceholder&&u(this.$input).prop("placeholder",this.options.secondaryPlaceholder)}},{key:"_isValid",value:function(e){if(e.hasOwnProperty("tag")&&""!==e.tag){for(var t=!1,i=0;i<this.chipsData.length;i++)if(this.chipsData[i].tag===e.tag){t=!0;break}return!t}return!1}},{key:"addChip",value:function(e){if(this._isValid(e)&&!(this.chipsData.length>=this.options.limit)){var t=this._renderChip(e);this.$chips.add(t),this.chipsData.push(e),u(this.$input).before(t),this._setPlaceholder(),"function"==typeof this.options.onChipAdd&&this.options.onChipAdd.call(this,this.$el,t)}}},{key:"deleteChip",value:function(e){var t=this.$chips.eq(e);this.$chips.eq(e).remove(),this.$chips=this.$chips.filter(function(e){return 0<=u(e).index()}),this.chipsData.splice(e,1),this._setPlaceholder(),"function"==typeof this.options.onChipDelete&&this.options.onChipDelete.call(this,this.$el,t[0])}},{key:"selectChip",value:function(e){var t=this.$chips.eq(e);(this._selectedChip=t)[0].focus(),"function"==typeof this.options.onChipSelect&&this.options.onChipSelect.call(this,this.$el,t[0])}}],[{key:"init",value:function(e,t){return _get(a.__proto__||Object.getPrototypeOf(a),"init",this).call(this,this,e,t)}},{key:"getInstance",value:function(e){return(e.jquery?e[0]:e).M_Chips}},{key:"_handleChipsKeydown",value:function(e){a._keydown=!0;var t=u(e.target).closest(".chips"),i=e.target&&t.length;if(!u(e.target).is("input, textarea")&&i){var n=t[0].M_Chips;if(8===e.keyCode||46===e.keyCode){e.preventDefault();var s=n.chipsData.length;if(n._selectedChip){var o=n._selectedChip.index();n.deleteChip(o),n._selectedChip=null,s=Math.max(o-1,0)}n.chipsData.length&&n.selectChip(s)}else if(37===e.keyCode){if(n._selectedChip){var h=n._selectedChip.index()-1;if(h<0)return;n.selectChip(h)}}else if(39===e.keyCode&&n._selectedChip){var l=n._selectedChip.index()+1;l>=n.chipsData.length?n.$input[0].focus():n.selectChip(l)}}}},{key:"_handleChipsKeyup",value:function(e){a._keydown=!1}},{key:"_handleChipsBlur",value:function(e){a._keydown||(u(e.target).closest(".chips")[0].M_Chips._selectedChip=null)}},{key:"defaults",get:function(){return t}}]),a}();e._keydown=!1,M.Chips=e,M.jQueryLoaded&&M.initializeJqueryWrapper(e,"chips","M_Chips"),u(document).ready(function(){u(document.body).on("click",".chip .close",function(){var e=u(this).closest(".chips");e.length&&e[0].M_Chips||u(this).closest(".chip").remove()})})}(cash);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
