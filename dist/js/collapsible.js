"use strict";var _createClass=function(){function n(e,t){for(var i=0;i<t.length;i++){var n=t[i];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(e,t,i){return t&&n(e.prototype,t),i&&n(e,i),e}}(),_get=function e(t,i,n){null===t&&(t=Function.prototype);var o=Object.getOwnPropertyDescriptor(t,i);if(void 0===o){var l=Object.getPrototypeOf(t);return null===l?void 0:e(l,i,n)}if("value"in o)return o.value;var s=o.get;return void 0!==s?s.call(n):void 0};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}!function(a,r){var t={accordion:!0,onOpenStart:void 0,onOpenEnd:void 0,onCloseStart:void 0,onCloseEnd:void 0,inDuration:300,outDuration:300},e=function(e){function o(e,t){_classCallCheck(this,o);var i=_possibleConstructorReturn(this,(o.__proto__||Object.getPrototypeOf(o)).call(this,o,e,t));(i.el.M_Collapsible=i).options=a.extend({},o.defaults,t),i.$headers=i.$el.children("li").children(".collapsible-header"),i.$headers.attr("tabindex",0),i._setupEventHandlers();var n=i.$el.children("li.active").children(".collapsible-body");return i.options.accordion?n.first().css("display","block"):n.css("display","block"),i}return _inherits(o,Component),_createClass(o,[{key:"destroy",value:function(){this._removeEventHandlers(),this.el.M_Collapsible=void 0}},{key:"_setupEventHandlers",value:function(){var t=this;this._handleCollapsibleClickBound=this._handleCollapsibleClick.bind(this),this._handleCollapsibleKeydownBound=this._handleCollapsibleKeydown.bind(this),this.el.addEventListener("click",this._handleCollapsibleClickBound),this.$headers.each(function(e){e.addEventListener("keydown",t._handleCollapsibleKeydownBound)})}},{key:"_removeEventHandlers",value:function(){this.el.removeEventListener("click",this._handleCollapsibleClickBound)}},{key:"_handleCollapsibleClick",value:function(e){var t=a(e.target).closest(".collapsible-header");if(e.target&&t.length){var i=t.closest(".collapsible");if(i[0]===this.el){var n=t.closest("li"),o=i.children("li"),l=n[0].classList.contains("active"),s=o.index(n);l?this.close(s):this.open(s)}}}},{key:"_handleCollapsibleKeydown",value:function(e){13===e.keyCode&&this._handleCollapsibleClickBound(e)}},{key:"_animateIn",value:function(e){var t=this,i=this.$el.children("li").eq(e);if(i.length){var n=i.children(".collapsible-body");r.remove(n[0]),n.css({display:"block",overflow:"hidden",height:0,paddingTop:"",paddingBottom:""});var o=n.css("padding-top"),l=n.css("padding-bottom"),s=n[0].scrollHeight;n.css({paddingTop:0,paddingBottom:0}),r({targets:n[0],height:s,paddingTop:o,paddingBottom:l,duration:this.options.inDuration,easing:"easeInOutCubic",complete:function(e){n.css({overflow:"",paddingTop:"",paddingBottom:"",height:""}),"function"==typeof t.options.onOpenEnd&&t.options.onOpenEnd.call(t,i[0])}})}}},{key:"_animateOut",value:function(e){var t=this,i=this.$el.children("li").eq(e);if(i.length){var n=i.children(".collapsible-body");r.remove(n[0]),n.css("overflow","hidden"),r({targets:n[0],height:0,paddingTop:0,paddingBottom:0,duration:this.options.outDuration,easing:"easeInOutCubic",complete:function(){n.css({height:"",overflow:"",padding:"",display:""}),"function"==typeof t.options.onCloseEnd&&t.options.onCloseEnd.call(t,i[0])}})}}},{key:"open",value:function(e){var i=this,t=this.$el.children("li").eq(e);if(t.length&&!t[0].classList.contains("active")){if("function"==typeof this.options.onOpenStart&&this.options.onOpenStart.call(this,t[0]),this.options.accordion){var n=this.$el.children("li");this.$el.children("li.active").each(function(e){var t=n.index(a(e));i.close(t)})}t[0].classList.add("active"),this._animateIn(e)}}},{key:"close",value:function(e){var t=this.$el.children("li").eq(e);t.length&&t[0].classList.contains("active")&&("function"==typeof this.options.onCloseStart&&this.options.onCloseStart.call(this,t[0]),t[0].classList.remove("active"),this._animateOut(e))}}],[{key:"init",value:function(e,t){return _get(o.__proto__||Object.getPrototypeOf(o),"init",this).call(this,this,e,t)}},{key:"getInstance",value:function(e){return(e.jquery?e[0]:e).M_Collapsible}},{key:"defaults",get:function(){return t}}]),o}();M.Collapsible=e,M.jQueryLoaded&&M.initializeJqueryWrapper(e,"collapsible","M_Collapsible")}(cash,M.anime);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
