"use strict";var _createClass=function(){function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),e}}(),_get=function e(t,n,a){null===t&&(t=Function.prototype);var r=Object.getOwnPropertyDescriptor(t,n);if(void 0===r){var l=Object.getPrototypeOf(t);return null===l?void 0:e(l,n,a)}if("value"in r)return r.value;var o=r.get;return void 0!==o?o.call(a):void 0};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}!function(r){var t={responsiveThreshold:0},e=function(e){function a(e,t){_classCallCheck(this,a);var n=_possibleConstructorReturn(this,(a.__proto__||Object.getPrototypeOf(a)).call(this,a,e,t));return(n.el.M_Parallax=n).options=r.extend({},a.defaults,t),n._enabled=window.innerWidth>n.options.responsiveThreshold,n.$img=n.$el.find("img").first(),n.$img.each(function(){this.complete&&r(this).trigger("load")}),n._updateParallax(),n._setupEventHandlers(),n._setupStyles(),a._parallaxes.push(n),n}return _inherits(a,Component),_createClass(a,[{key:"destroy",value:function(){a._parallaxes.splice(a._parallaxes.indexOf(this),1),this.$img[0].style.transform="",this._removeEventHandlers(),this.$el[0].M_Parallax=void 0}},{key:"_setupEventHandlers",value:function(){this._handleImageLoadBound=this._handleImageLoad.bind(this),this.$img[0].addEventListener("load",this._handleImageLoadBound),0===a._parallaxes.length&&(a._handleScrollThrottled=M.throttle(a._handleScroll,5),window.addEventListener("scroll",a._handleScrollThrottled),a._handleWindowResizeThrottled=M.throttle(a._handleWindowResize,5),window.addEventListener("resize",a._handleWindowResizeThrottled))}},{key:"_removeEventHandlers",value:function(){this.$img[0].removeEventListener("load",this._handleImageLoadBound),0===a._parallaxes.length&&(window.removeEventListener("scroll",a._handleScrollThrottled),window.removeEventListener("resize",a._handleWindowResizeThrottled))}},{key:"_setupStyles",value:function(){this.$img[0].style.opacity=1}},{key:"_handleImageLoad",value:function(){this._updateParallax()}},{key:"_updateParallax",value:function(){var e=0<this.$el.height()?this.el.parentNode.offsetHeight:500,t=this.$img[0].offsetHeight-e,n=this.$el.offset().top+e,a=this.$el.offset().top,r=M.getDocumentScrollTop(),l=window.innerHeight,o=t*((r+l-a)/(e+l));this._enabled?r<n&&a<r+l&&(this.$img[0].style.transform="translate3D(-50%, "+o+"px, 0)"):this.$img[0].style.transform=""}}],[{key:"init",value:function(e,t){return _get(a.__proto__||Object.getPrototypeOf(a),"init",this).call(this,this,e,t)}},{key:"getInstance",value:function(e){return(e.jquery?e[0]:e).M_Parallax}},{key:"_handleScroll",value:function(){for(var e=0;e<a._parallaxes.length;e++){var t=a._parallaxes[e];t._updateParallax.call(t)}}},{key:"_handleWindowResize",value:function(){for(var e=0;e<a._parallaxes.length;e++){var t=a._parallaxes[e];t._enabled=window.innerWidth>t.options.responsiveThreshold}}},{key:"defaults",get:function(){return t}}]),a}();e._parallaxes=[],M.Parallax=e,M.jQueryLoaded&&M.initializeJqueryWrapper(e,"parallax","M_Parallax")}(cash);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
