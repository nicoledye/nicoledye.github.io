"use strict";var _createClass=function(){function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),e}}(),_get=function e(t,n,i){null===t&&(t=Function.prototype);var l=Object.getOwnPropertyDescriptor(t,n);if(void 0===l){var s=Object.getPrototypeOf(t);return null===s?void 0:e(s,n,i)}if("value"in l)return l.value;var o=l.get;return void 0!==o?o.call(i):void 0};function _classCallCheck(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function _possibleConstructorReturn(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function _inherits(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}!function(s,o){var t={throttle:100,scrollOffset:200,activeClass:"active",getActiveElement:function(e){return'a[href="#'+e+'"]'}},e=function(e){function _(e,t){_classCallCheck(this,_);var n=_possibleConstructorReturn(this,(_.__proto__||Object.getPrototypeOf(_)).call(this,_,e,t));return(n.el.M_ScrollSpy=n).options=s.extend({},_.defaults,t),_._elements.push(n),_._count++,_._increment++,n.tickId=-1,n.id=_._increment,n._setupEventHandlers(),n._handleWindowScroll(),n}return _inherits(_,Component),_createClass(_,[{key:"destroy",value:function(){_._elements.splice(_._elements.indexOf(this),1),_._elementsInView.splice(_._elementsInView.indexOf(this),1),_._visibleElements.splice(_._visibleElements.indexOf(this.$el),1),_._count--,this._removeEventHandlers(),s(this.options.getActiveElement(this.$el.attr("id"))).removeClass(this.options.activeClass),this.el.M_ScrollSpy=void 0}},{key:"_setupEventHandlers",value:function(){var e=M.throttle(this._handleWindowScroll,200);this._handleThrottledResizeBound=e.bind(this),this._handleWindowScrollBound=this._handleWindowScroll.bind(this),1===_._count&&(window.addEventListener("scroll",this._handleWindowScrollBound),window.addEventListener("resize",this._handleThrottledResizeBound),document.body.addEventListener("click",this._handleTriggerClick))}},{key:"_removeEventHandlers",value:function(){0===_._count&&(window.removeEventListener("scroll",this._handleWindowScrollBound),window.removeEventListener("resize",this._handleThrottledResizeBound),document.body.removeEventListener("click",this._handleTriggerClick))}},{key:"_handleTriggerClick",value:function(e){for(var t=s(e.target),n=_._elements.length-1;0<=n;n--){var i=_._elements[n];if(t.is('a[href="#'+i.$el.attr("id")+'"]')){e.preventDefault();var l=i.$el.offset().top+1;o({targets:[document.documentElement,document.body],scrollTop:l-i.options.scrollOffset,duration:400,easing:"easeOutCubic"});break}}}},{key:"_handleWindowScroll",value:function(){_._ticks++;for(var e=M.getDocumentScrollTop(),t=M.getDocumentScrollLeft(),n=t+window.innerWidth,i=e+window.innerHeight,l=_._findElements(e,n,i,t),s=0;s<l.length;s++){var o=l[s];o.tickId<0&&o._enter(),o.tickId=_._ticks}for(var r=0;r<_._elementsInView.length;r++){var c=_._elementsInView[r],a=c.tickId;0<=a&&a!==_._ticks&&(c._exit(),c.tickId=-1)}_._elementsInView=l}},{key:"_enter",value:function(){(_._visibleElements=_._visibleElements.filter(function(e){return 0!=e.height()}))[0]?(s(this.options.getActiveElement(_._visibleElements[0].attr("id"))).removeClass(this.options.activeClass),_._visibleElements[0][0].M_ScrollSpy&&this.id<_._visibleElements[0][0].M_ScrollSpy.id?_._visibleElements.unshift(this.$el):_._visibleElements.push(this.$el)):_._visibleElements.push(this.$el),s(this.options.getActiveElement(_._visibleElements[0].attr("id"))).addClass(this.options.activeClass)}},{key:"_exit",value:function(){var t=this;(_._visibleElements=_._visibleElements.filter(function(e){return 0!=e.height()}))[0]&&(s(this.options.getActiveElement(_._visibleElements[0].attr("id"))).removeClass(this.options.activeClass),(_._visibleElements=_._visibleElements.filter(function(e){return e.attr("id")!=t.$el.attr("id")}))[0]&&s(this.options.getActiveElement(_._visibleElements[0].attr("id"))).addClass(this.options.activeClass))}}],[{key:"init",value:function(e,t){return _get(_.__proto__||Object.getPrototypeOf(_),"init",this).call(this,this,e,t)}},{key:"getInstance",value:function(e){return(e.jquery?e[0]:e).M_ScrollSpy}},{key:"_findElements",value:function(e,t,n,i){for(var l=[],s=0;s<_._elements.length;s++){var o=_._elements[s],r=e+o.options.scrollOffset||200;if(0<o.$el.height()){var c=o.$el.offset().top,a=o.$el.offset().left,u=a+o.$el.width(),d=c+o.$el.height();!(t<a||u<i||n<c||d<r)&&l.push(o)}}return l}},{key:"defaults",get:function(){return t}}]),_}();e._elements=[],e._elementsInView=[],e._visibleElements=[],e._count=0,e._increment=0,e._ticks=0,M.ScrollSpy=e,M.jQueryLoaded&&M.initializeJqueryWrapper(e,"scrollSpy","M_ScrollSpy")}(cash,M.anime);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
