"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};!function(n){var t=t||{},e=document.querySelectorAll.bind(document);function h(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e+=n+":"+t[n]+";");return e}var b={duration:750,show:function(t,e){if(2===t.button)return!1;var n=e||this,o=document.createElement("div");o.className="waves-ripple",n.appendChild(o);var a,i,r,s,u,c,d,l=(c={top:0,left:0},d=(a=n)&&a.ownerDocument,i=d.documentElement,"undefined"!==_typeof(a.getBoundingClientRect)&&(c=a.getBoundingClientRect()),r=null!==(u=s=d)&&u===u.window?s:9===s.nodeType&&s.defaultView,{top:c.top+r.pageYOffset-i.clientTop,left:c.left+r.pageXOffset-i.clientLeft}),f=t.pageY-l.top,m=t.pageX-l.left,p="scale("+n.clientWidth/100*10+")";"touches"in t&&(f=t.touches[0].pageY-l.top,m=t.touches[0].pageX-l.left),o.setAttribute("data-hold",Date.now()),o.setAttribute("data-scale",p),o.setAttribute("data-x",m),o.setAttribute("data-y",f);var v={top:f+"px",left:m+"px"};o.className=o.className+" waves-notransition",o.setAttribute("style",h(v)),o.className=o.className.replace("waves-notransition",""),v["-webkit-transform"]=p,v["-moz-transform"]=p,v["-ms-transform"]=p,v["-o-transform"]=p,v.transform=p,v.opacity="1",v["-webkit-transition-duration"]=b.duration+"ms",v["-moz-transition-duration"]=b.duration+"ms",v["-o-transition-duration"]=b.duration+"ms",v["transition-duration"]=b.duration+"ms",v["-webkit-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",v["-moz-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",v["-o-transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",v["transition-timing-function"]="cubic-bezier(0.250, 0.460, 0.450, 0.940)",o.setAttribute("style",h(v))},hide:function(t){u.touchup(t);var e=this,n=(e.clientWidth,null),o=e.getElementsByClassName("waves-ripple");if(!(0<o.length))return!1;var a=(n=o[o.length-1]).getAttribute("data-x"),i=n.getAttribute("data-y"),r=n.getAttribute("data-scale"),s=350-(Date.now()-Number(n.getAttribute("data-hold")));s<0&&(s=0),setTimeout(function(){var t={top:i+"px",left:a+"px",opacity:"0","-webkit-transition-duration":b.duration+"ms","-moz-transition-duration":b.duration+"ms","-o-transition-duration":b.duration+"ms","transition-duration":b.duration+"ms","-webkit-transform":r,"-moz-transform":r,"-ms-transform":r,"-o-transform":r,transform:r};n.setAttribute("style",h(t)),setTimeout(function(){try{e.removeChild(n)}catch(t){return!1}},b.duration)},s)},wrapInput:function(t){for(var e=0;e<t.length;e++){var n=t[e];if("input"===n.tagName.toLowerCase()){var o=n.parentNode;if("i"===o.tagName.toLowerCase()&&-1!==o.className.indexOf("waves-effect"))continue;var a=document.createElement("i");a.className=n.className+" waves-input-wrapper";var i=n.getAttribute("style");i||(i=""),a.setAttribute("style",i),n.className="waves-button-input",n.removeAttribute("style"),o.replaceChild(a,n),a.appendChild(n)}}}},u={touches:0,allowEvent:function(t){var e=!0;return"touchstart"===t.type?u.touches+=1:"touchend"===t.type||"touchcancel"===t.type?setTimeout(function(){0<u.touches&&(u.touches-=1)},500):"mousedown"===t.type&&0<u.touches&&(e=!1),e},touchup:function(t){u.allowEvent(t)}};function o(t){var e=function(t){if(!1===u.allowEvent(t))return null;for(var e=null,n=t.target||t.srcElement;null!==n.parentNode;){if(!(n instanceof SVGElement)&&-1!==n.className.indexOf("waves-effect")){e=n;break}n=n.parentNode}return e}(t);null!==e&&(b.show(t,e),"ontouchstart"in n&&(e.addEventListener("touchend",b.hide,!1),e.addEventListener("touchcancel",b.hide,!1)),e.addEventListener("mouseup",b.hide,!1),e.addEventListener("mouseleave",b.hide,!1),e.addEventListener("dragend",b.hide,!1))}t.displayEffect=function(t){"duration"in(t=t||{})&&(b.duration=t.duration),b.wrapInput(e(".waves-effect")),"ontouchstart"in n&&document.body.addEventListener("touchstart",o,!1),document.body.addEventListener("mousedown",o,!1)},t.attach=function(t){"input"===t.tagName.toLowerCase()&&(b.wrapInput([t]),t=t.parentNode),"ontouchstart"in n&&t.addEventListener("touchstart",o,!1),t.addEventListener("mousedown",o,!1)},n.Waves=t,document.addEventListener("DOMContentLoaded",function(){t.displayEffect()},!1)}(window);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
